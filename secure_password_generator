from secrets import choice


# Generate a secure password based on user-defined criteria
def choices(alphabet: str, length: int) -> str:
    return "".join(choice(alphabet) for _ in range(length))


# Generate a secure password based on user-defined criteria with unique characters
def sample(alp: str, length: int) -> str:
    string = ""
    for _ in range(length):
        string += choice(alp)
        alp = alp.replace(string[-1], "", 1)
    return string


# Ask user for password criteria
def ask_password_criteria(messege: str) -> int:
    while True:
        user_input = input(messege)
        if user_input in ("1", "0"):
            return int(user_input)
        else:
            print("Incorrect input, please enter 1 (YES) or 0 (NO).")


# Main function to generate password
def password_generator() -> str:
    chars = {
    "digits_sym": "0123456789",
    "lowercase_sym": "abcdefghijklmnopqrstuvwxyz",
    "uppercase_sym": "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
    "punctuation_sym": "!#$%&*+-=?@^_",
}
    while True:
        len = input("Password length: ")
        if len.isdigit() and int(len) > 0:
            break
        else:
            print("Incorrect input, please enter a positive integer.")
    
    alphabet = chars["digits_sym"] * ask_password_criteria("Whether to include numbers 0123456789 YES(1)/NO(0): ") + \
    chars["lowercase_sym"] * ask_password_criteria("Whether to include lowercase letters abcdefghijklmnopqrstuvwxyz YES(1)/NO(0): ") + \
    chars["uppercase_sym"] * ask_password_criteria("Whether to include uppercase letters ABCDEFGHIJKLMNOPQRSTUVWXYZ YES(1)/NO(0): ") + \
    chars["punctuation_sym"] * ask_password_criteria("Whether to include punctuation !#$%&*+-=?@^_ YES(1)/NO(0): ")

    if ask_password_criteria('Do you want the characters in your password to be unique? YES(1)/NO(0)'):
        return sample(alphabet, int(len))
    else:
        return choices(alphabet, int(len))


print(password_generator())
